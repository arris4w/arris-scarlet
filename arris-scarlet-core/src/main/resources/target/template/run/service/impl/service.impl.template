/*
 * 文  件  名：${bean.name}Service.java
 * 版         权：
 * 描         述：
 * 修  改  人：${common.user}
 * 修改时间：${common.date}
 */
package ${common.package}.service.${bean.pname.lower}.impl;
${import}
/**
 * ${bean.comment}服务接口实现
 *
 * @author ${common.user}
 * @version V1.0 ${common.date}
 */
@Service
public class ${bean.name}Service implements I${bean.name}Service
{

    /**
     * 日志实例
     */
    private static Logger log = LoggerFactory.getLogger(${bean.name}Service.class);

    /**
     * ${bean.comment}数据库操作
     */
    @Resource
    private ${bean.name}Dao ${bean.pname}Dao;

    /**
     * 添加${bean.comment}
     *
     * @author ${common.user}
     * @param ${bean.pname}
     *            ${bean.comment}对象
     * @throws ${common.exception}
     *             ${common.exception}
     */
    public void add(${bean.name} ${bean.pname}) throws ${common.exception}
    {
        if (null == ${bean.pname})
        {
            log.error("Param invalid: the '${bean.pname}' is null.");
            throw new ${common.exception}(ResultCode.REQUEST_PARAM_ERROR);
        }

        try
        {
            ${bean.pname}Dao.save(${bean.pname});
        }
        catch (Exception e)
        {
            // TODO 请修改日志中所涉及的参数
            log.error("Add ${bean.pname} ${method.body.error.log.key} has exception.", e);
            throw new ${common.exception}(ResultCode.BUSINESS_PROCESS_FAILURE, e);
        }
    }

     /**
     * 删除${bean.comment}
     *
     * @author ${common.user}
     ${method.comment}
     * @throws ${common.exception}
     *             ${common.exception}
     */
    public void delete(${method.param}) throws ${common.exception}
    {
        if (${method.body.judge})
        {
            log.error("Param invalid: the ${method.body.judge.log} is invalid.");
            throw new ${common.exception}(ResultCode.REQUEST_PARAM_ERROR);
        }

        try
        {
            ${bean.pname}Dao.delete(${method.body.param});
        }
        catch (Exception e)
        {
            log.error("Delete ${bean.pname} ${method.body.error.log} has exception.", e);
            throw new ${common.exception}(ResultCode.BUSINESS_PROCESS_FAILURE, e);
        }
    }
    ${service.impl.deletes}
    /**
     * 获取${bean.comment}详情
     *
     * @author ${common.user}
     ${method.comment}
     * @throws ${common.exception}
     *             ${common.exception}
     * @return ${bean.comment}
     */
    public ${bean.name} get(${method.param}) throws ${common.exception}
    {
        if (${method.body.judge})
        {
            log.error("Param invalid: the ${method.body.judge.log} is null.");
            throw new ${common.exception}(ResultCode.REQUEST_PARAM_ERROR);
        }

        try
        {
            return ${bean.pname}Dao.getById(${method.body.param});
        }
        catch (Exception e)
        {
            log.error("Get ${bean.pname} ${method.body.error.log} detail has exception.", e);
            throw new ${common.exception}(ResultCode.BUSINESS_PROCESS_FAILURE, e);
        }
    }

    /**
     * 修改${bean.comment}
     *
     * @author ${common.user}
     * @param ${bean.pname}
     *            ${bean.comment}对象
     * @return 是否修改成功
     * @throws ${common.exception}
     *             ${common.exception}
     */
    public boolean modify(${bean.name} ${bean.pname}) throws ${common.exception}
    {
        if (null == ${bean.pname} || ${method.body.judge.key})
        {
            log.error("Param invalid: the '${bean.pname}' or ${method.body.judge.log} is invalid.");
            throw new ${common.exception}(ResultCode.REQUEST_PARAM_ERROR);
        }

        try
        {
            int result = ${bean.pname}Dao.update(${bean.pname});
            return result == 1 ? true : false;
        }
        catch (Exception e)
        {
            log.error("Modify ${bean.pname} ${method.body.error.log.key} has exception.", e);
            throw new ${common.exception}(ResultCode.BUSINESS_PROCESS_FAILURE, e);
        }
    }

    /**
     * 分页获取${bean.comment}列表数据
     *
     * @author ${common.user}
     * @param page
     *            分页对象
     * @throws ${common.exception}
     *             ${common.exception}
     */
    public void list(Page page) throws ${common.exception}
    {
        if (null == page)
        {
            log.error("Param invalid: the 'page' is null.");
            throw new ${common.exception}(ResultCode.REQUEST_PARAM_ERROR);
        }

        try
        {
            List<${bean.name}> ${bean.pname}s = ${bean.pname}Dao.list(page);
            int totalRecords = ${bean.pname}Dao.listCount(page);

            page.setTotalRecords(totalRecords);
            page.setCollection(${bean.pname}s);
        }
        catch (Exception e)
        {
            log.error("Get ${bean.pname} page has exception.", e);
            throw new ${common.exception}(ResultCode.BUSINESS_PROCESS_FAILURE, e);
        }
    }
}
