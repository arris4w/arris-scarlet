/*
 * 文  件  名：${common.projectName}Context.java
 * 版         权：Copyright 2015-2025 ARRIS Rights Reserved.
 * 描         述：
 * 修  改  人：${common.user}
 * 修改时间：${common.date}
 * 修改内容：新增
 */
package ${common.package}.system.context;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

/**
 * 获取spring容器，以访问容器中定义的其他bean
 *
 * @author ${common.user}
 * @version C01 ${common.date}
 * @since
 */
public class ${common.projectName}Context implements ApplicationContextAware
{
    /**
     * 日志实例
     */
    private static final Logger log = LoggerFactory.getLogger(${common.projectName}Context.class);

    /**
     * Spring应用上下文环境
     */
    private static ApplicationContext applicationContext;

    /**
     * 实现ApplicationContextAware接口的回调方法，设置上下文环境
     *
     * @param applicationContext
     *            ApplicationContext
     */
    public void setApplicationContext(ApplicationContext applicationContext)
    {
        ${common.projectName}Context.applicationContext = applicationContext;
    }

    /**
     * 获取上下文
     *
     * @return ApplicationContext
     */
    public static ApplicationContext getApplicationContext()
    {
        return applicationContext;
    }

    /**
     * 获取对象 这里重写了bean方法，起主要作用
     *
     * @param name
     *            需要读Bean的名字
     * @return Object 一个以所给名字注册的bean的实例
     */
    public static Object getBean(String name)
    {
        try
        {
            return applicationContext.getBean(name);
        }
        catch (BeansException e)
        {
            if (e instanceof NoSuchBeanDefinitionException)
            {
                log.warn("No bean named '" + name + "' is defined");
                return null;
            }
            throw e;
        }
    }

    /**
     * 根据类名获取Bean
     *
     * @param clazz
     *            Bean的类名
     * @author ${common.user}
     * @return RestJson
     */
    @SuppressWarnings("unchecked")
    public static <T> T getBean(Class<T> clazz)
    {
        String className = clazz.getSimpleName();
        String firstLetter = String.valueOf(className.charAt(0)).toLowerCase();
        String beanName = firstLetter + className.substring(1);
        return (T) applicationContext.getBean(beanName);
    }
}